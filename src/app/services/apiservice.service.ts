/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.17.0 (NJsonSchema v9.13.26.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({ providedIn: 'root' })
export class AccountDetailsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:44381";
    }

    /**
     * @return Ok
     */
    create(createRequest: AccountDetails_CreateRequest): Observable<AccountDetails_CreateResponse> {
        let url_ = this.baseUrl + "/api/v1/AccountDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<AccountDetails_CreateResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<AccountDetails_CreateResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<AccountDetails_CreateResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AccountDetails_CreateResponse.fromJS(resultData200) : new AccountDetails_CreateResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AccountDetails_CreateResponse>(<any>null);
    }

    get(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1/AccountDetails";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    /**
     * @return Ok
     */
    getAll(getAllRequest: AccountDetails_GetAllRequest): Observable<AccountDetails_GetAllResponse> {
        let url_ = this.baseUrl + "/api/v1/AccountDetails/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(getAllRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<AccountDetails_GetAllResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<AccountDetails_GetAllResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<AccountDetails_GetAllResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AccountDetails_GetAllResponse.fromJS(resultData200) : new AccountDetails_GetAllResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AccountDetails_GetAllResponse>(<any>null);
    }
}

@Injectable({ providedIn: 'root' })
export class HealthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44381";
    }

    /**
     * @return Ok
     */
    get(): Observable<Health_GetResponse> {
        let url_ = this.baseUrl + "/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Health_GetResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<Health_GetResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Health_GetResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Health_GetResponse.fromJS(resultData200) : new Health_GetResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Health_GetResponse>(<any>null);
    }

    /**
     * @return Ok
     */
    getStatuses(): Observable<Health_GetResponse> {
        let url_ = this.baseUrl + "/statuses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStatuses(<any>response_);
                } catch (e) {
                    return <Observable<Health_GetResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<Health_GetResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetStatuses(response: HttpResponseBase): Observable<Health_GetResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Health_GetResponse.fromJS(resultData200) : new Health_GetResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Health_GetResponse>(<any>null);
    }
}

@Injectable({ providedIn: 'root' })
export class PingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44381";
    }

    get(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export class AccountDetails_CreateResponse implements IAccountDetails_CreateResponse {
    accountDetailId!: number;

    constructor(data?: IAccountDetails_CreateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accountDetailId = data["accountDetailId"];
        }
    }

    static fromJS(data: any): AccountDetails_CreateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDetails_CreateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountDetailId"] = this.accountDetailId;
        return data; 
    }
}

export interface IAccountDetails_CreateResponse {
    accountDetailId: number;
}

export class AccountDetails_CreateRequest implements IAccountDetails_CreateRequest {
    loginId?: string | undefined;
    loginPassword?: string | undefined;

    constructor(data?: IAccountDetails_CreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginId = data["loginId"];
            this.loginPassword = data["loginPassword"];
        }
    }

    static fromJS(data: any): AccountDetails_CreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDetails_CreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginId"] = this.loginId;
        data["loginPassword"] = this.loginPassword;
        return data; 
    }
}

export interface IAccountDetails_CreateRequest {
    loginId?: string | undefined;
    loginPassword?: string | undefined;
}

export class AccountDetails_GetAllResponse implements IAccountDetails_GetAllResponse {
    accountDetails?: AccountDetails_AccountDetails[] | undefined;
    totalRows!: number;

    constructor(data?: IAccountDetails_GetAllResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["accountDetails"] && data["accountDetails"].constructor === Array) {
                this.accountDetails = [] as any;
                for (let item of data["accountDetails"])
                    this.accountDetails!.push(AccountDetails_AccountDetails.fromJS(item));
            }
            this.totalRows = data["totalRows"];
        }
    }

    static fromJS(data: any): AccountDetails_GetAllResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDetails_GetAllResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.accountDetails && this.accountDetails.constructor === Array) {
            data["accountDetails"] = [];
            for (let item of this.accountDetails)
                data["accountDetails"].push(item.toJSON());
        }
        data["totalRows"] = this.totalRows;
        return data; 
    }
}

export interface IAccountDetails_GetAllResponse {
    accountDetails?: AccountDetails_AccountDetails[] | undefined;
    totalRows: number;
}

export class AccountDetails_AccountDetails implements IAccountDetails_AccountDetails {
    accountDetailId!: number;
    loginId?: string | undefined;
    loginPassword?: string | undefined;

    constructor(data?: IAccountDetails_AccountDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accountDetailId = data["accountDetailId"];
            this.loginId = data["loginId"];
            this.loginPassword = data["loginPassword"];
        }
    }

    static fromJS(data: any): AccountDetails_AccountDetails {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDetails_AccountDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountDetailId"] = this.accountDetailId;
        data["loginId"] = this.loginId;
        data["loginPassword"] = this.loginPassword;
        return data; 
    }
}

export interface IAccountDetails_AccountDetails {
    accountDetailId: number;
    loginId?: string | undefined;
    loginPassword?: string | undefined;
}

export class AccountDetails_GetAllRequest implements IAccountDetails_GetAllRequest {
    filter?: Queries_Filter | undefined;
    sortOrder?: Queries_SortOrder | undefined;
    pagination?: Queries_Pagination | undefined;

    constructor(data?: IAccountDetails_GetAllRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.filter = data["filter"] ? Queries_Filter.fromJS(data["filter"]) : <any>undefined;
            this.sortOrder = data["sortOrder"] ? Queries_SortOrder.fromJS(data["sortOrder"]) : <any>undefined;
            this.pagination = data["pagination"] ? Queries_Pagination.fromJS(data["pagination"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AccountDetails_GetAllRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDetails_GetAllRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["sortOrder"] = this.sortOrder ? this.sortOrder.toJSON() : <any>undefined;
        data["pagination"] = this.pagination ? this.pagination.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAccountDetails_GetAllRequest {
    filter?: Queries_Filter | undefined;
    sortOrder?: Queries_SortOrder | undefined;
    pagination?: Queries_Pagination | undefined;
}

export class Queries_Filter implements IQueries_Filter {
    filterExpressions?: Queries_FilterExpression[] | undefined;

    constructor(data?: IQueries_Filter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["filterExpressions"] && data["filterExpressions"].constructor === Array) {
                this.filterExpressions = [] as any;
                for (let item of data["filterExpressions"])
                    this.filterExpressions!.push(Queries_FilterExpression.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Queries_Filter {
        data = typeof data === 'object' ? data : {};
        let result = new Queries_Filter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.filterExpressions && this.filterExpressions.constructor === Array) {
            data["filterExpressions"] = [];
            for (let item of this.filterExpressions)
                data["filterExpressions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IQueries_Filter {
    filterExpressions?: Queries_FilterExpression[] | undefined;
}

export class Queries_FilterExpression implements IQueries_FilterExpression {
    filterColumnName?: string | undefined;
    filterOperator!: Queries_FilterOperator;
    filterValues?: string[] | undefined;

    constructor(data?: IQueries_FilterExpression) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.filterColumnName = data["filterColumnName"];
            this.filterOperator = data["filterOperator"];
            if (data["filterValues"] && data["filterValues"].constructor === Array) {
                this.filterValues = [] as any;
                for (let item of data["filterValues"])
                    this.filterValues!.push(item);
            }
        }
    }

    static fromJS(data: any): Queries_FilterExpression {
        data = typeof data === 'object' ? data : {};
        let result = new Queries_FilterExpression();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterColumnName"] = this.filterColumnName;
        data["filterOperator"] = this.filterOperator;
        if (this.filterValues && this.filterValues.constructor === Array) {
            data["filterValues"] = [];
            for (let item of this.filterValues)
                data["filterValues"].push(item);
        }
        return data; 
    }
}

export interface IQueries_FilterExpression {
    filterColumnName?: string | undefined;
    filterOperator: Queries_FilterOperator;
    filterValues?: string[] | undefined;
}

export enum Queries_FilterOperator {
    None = 0, 
    Equals = 1, 
    Contains = 2, 
    GreaterThanOrEqual = 3, 
    LessThanOrEqual = 4, 
    GreaterThan = 5, 
    LessThan = 6, 
    NotEqual = 7, 
}

export class Queries_SortOrder implements IQueries_SortOrder {
    sortOrderExpressions?: Queries_SortOrderExpression[] | undefined;

    constructor(data?: IQueries_SortOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["sortOrderExpressions"] && data["sortOrderExpressions"].constructor === Array) {
                this.sortOrderExpressions = [] as any;
                for (let item of data["sortOrderExpressions"])
                    this.sortOrderExpressions!.push(Queries_SortOrderExpression.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Queries_SortOrder {
        data = typeof data === 'object' ? data : {};
        let result = new Queries_SortOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.sortOrderExpressions && this.sortOrderExpressions.constructor === Array) {
            data["sortOrderExpressions"] = [];
            for (let item of this.sortOrderExpressions)
                data["sortOrderExpressions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IQueries_SortOrder {
    sortOrderExpressions?: Queries_SortOrderExpression[] | undefined;
}

export class Queries_SortOrderExpression implements IQueries_SortOrderExpression {
    sortOrderColumnName?: string | undefined;
    sortOrderDirection!: Queries_SortOrderDirection;

    constructor(data?: IQueries_SortOrderExpression) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sortOrderColumnName = data["sortOrderColumnName"];
            this.sortOrderDirection = data["sortOrderDirection"];
        }
    }

    static fromJS(data: any): Queries_SortOrderExpression {
        data = typeof data === 'object' ? data : {};
        let result = new Queries_SortOrderExpression();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sortOrderColumnName"] = this.sortOrderColumnName;
        data["sortOrderDirection"] = this.sortOrderDirection;
        return data; 
    }
}

export interface IQueries_SortOrderExpression {
    sortOrderColumnName?: string | undefined;
    sortOrderDirection: Queries_SortOrderDirection;
}

export enum Queries_SortOrderDirection {
    None = 0, 
    Ascending = 1, 
    Descending = 2, 
}

export class Queries_Pagination implements IQueries_Pagination {
    startIndex!: number;
    pageSize!: Queries_PageSize;

    constructor(data?: IQueries_Pagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.startIndex = data["startIndex"];
            this.pageSize = data["pageSize"];
        }
    }

    static fromJS(data: any): Queries_Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Queries_Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startIndex"] = this.startIndex;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IQueries_Pagination {
    startIndex: number;
    pageSize: Queries_PageSize;
}

export enum Queries_PageSize {
    None = 0, 
    Rows25 = 1, 
    Rows50 = 2, 
    Rows100 = 3, 
}

export class Health_GetResponse implements IHealth_GetResponse {
    statuses?: { [key: string] : Health_HealthStatus; } | undefined;

    constructor(data?: IHealth_GetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["statuses"]) {
                this.statuses = {} as any;
                for (let key in data["statuses"]) {
                    if (data["statuses"].hasOwnProperty(key))
                        this.statuses![key] = data["statuses"][key];
                }
            }
        }
    }

    static fromJS(data: any): Health_GetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Health_GetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.statuses) {
            data["statuses"] = {};
            for (let key in this.statuses) {
                if (this.statuses.hasOwnProperty(key))
                    data["statuses"][key] = this.statuses[key];
            }
        }
        return data; 
    }
}

export interface IHealth_GetResponse {
    statuses?: { [key: string] : Health_HealthStatus; } | undefined;
}

export enum Health_HealthStatus {
    Ok = 0, 
    Error = 1, 
}

export class API_WeatherForecast implements IAPI_WeatherForecast {
    date!: Date;
    temperatureC!: number;
    temperatureF!: number;
    summary?: string | undefined;

    constructor(data?: IAPI_WeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.date = data["date"] ? new Date(data["date"].toString()) : <any>undefined;
            this.temperatureC = data["temperatureC"];
            this.temperatureF = data["temperatureF"];
            this.summary = data["summary"];
        }
    }

    static fromJS(data: any): API_WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new API_WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IAPI_WeatherForecast {
    date: Date;
    temperatureC: number;
    temperatureF: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    //message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}